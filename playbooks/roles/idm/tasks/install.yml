---
- name: Enable repo on bastion
  community.general.rhsm_repository:
    name: rhel-9-for-x86_64-appstream-rpms
    state: enabled
  become: true
  become_method: sudo

- name: Install IPA package on bastion
  ansible.builtin.dnf:
    name: ansible-freeipa
    state: present
  become: true
  become_method: sudo

- name: Generate dynamic inventory
  block:
    - name: Add host to group ipaserver
      ansible.builtin.add_host:
        name: "{{ ipaserver }}"
        ansible_user: "{{ idm_user }}"
        groups: ipaservers

    - name: Add host(s) to group ipareplicas
      ansible.builtin.add_host:
        name: "{{ item }}"
        ansible_user: "{{ idm_user }}"
        ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
        ipareplica_servers: "{{ ipaserver }}"
        groups: ipareplicas
      loop: "{{ ipareplicas }}"

- name: Create IDM 1 VM
  ansible.builtin.include_tasks: create_resource.yml
  vars:
    src: 01_idm1_vm.yml

- name: Wait for ssh connection to be open on IDM 1 VM
  ansible.builtin.wait_for:
    port: 22
    host: "{{ idm1_ip }}"
    timeout: 300

- name: Copy ssh ID to IDM 1 VM
  ansible.builtin.command: sshpass -p "{{ idm_password }}" ssh-copy-id -o StrictHostKeyChecking=no {{ idm_user }}@{{ idm1_hostname }}.{{ domain }}
  changed_when: true

- name: Create IDM 2 VM
  ansible.builtin.include_tasks: create_resource.yml
  vars:
    src: 02_idm2_vm.yml

- name: Wait for ssh connection to be open on IDM 2 VM
  ansible.builtin.wait_for:
    port: 22
    host: "{{ idm2_ip }}"
    timeout: 300

- name: Copy ssh id to IDM  2 VM
  ansible.builtin.command: sshpass -p "{{ idm_password }}" ssh-copy-id -o StrictHostKeyChecking=no {{ idm_user }}@{{ idm2_hostname }}.{{ domain }}
  changed_when: true

- name: Copy ssh id to IDM  server
  ansible.builtin.command: sshpass -p "{{ idm_password }}" ssh-copy-id -o StrictHostKeyChecking=no {{ idm_user }}@{{ ipaserver }}
  changed_when: true

- name: Install IDM replica - IDM1
  become: true
  delegate_to: "{{ idm1_hostname }}.{{ domain }}"
  block:
    - name: Prepare VM to install IDM Replica
      ansible.builtin.include_tasks: prepare_idm_vm.yml
      vars:
        hostname: "{{ idm1_hostname }}.{{ domain }}"

    - name: Install IDM replica
      vars:
        ipareplica_hostname: "{{ idm1_hostname }}.{{ domain }}"
        ipareplica_servers: "{{ ipaserver }}"
        ipaserver_domain: "{{ domain }}"
        ipaserver_realm: "{{ domain | upper }}"
        ipaserver_setup_dns: false
        ipaserver_auto_forwarders: false
        ipaclient_force_join: true
        ipareplica_setup_ca: true
        ipaadmin_principal: "{{ idm_user }}"
        ipaadmin_password: "{{ ipa_admin_pass }}"
        ipadm_password: "{{ ipa_dir_mgr_pass }}"
      ansible.builtin.import_role:
        name: ipareplica

- name: Install IDM replica - IDM2
  become: true
  delegate_to: "{{ idm2_hostname }}.{{ domain }}"
  block:
    - name: Prepare VM to install IDM Replica
      ansible.builtin.include_tasks: prepare_idm_vm.yml
      vars:
        hostname: "{{ idm2_hostname }}.{{ domain }}"

    - name: Install IDM replica
      vars:
        ipareplica_hostname: "{{ idm2_hostname }}.{{ domain }}"
        ipareplica_servers: "{{ ipaserver }}"
        ipaserver_domain: "{{ domain }}"
        ipaserver_realm: "{{ domain | upper }}"
        ipaserver_setup_dns: false
        ipaserver_auto_forwarders: false
        ipaclient_force_join: true
        ipareplica_setup_ca: true
        ipaadmin_principal: "{{ idm_user }}"
        ipaadmin_password: "{{ ipa_admin_pass }}"
        ipadm_password: "{{ ipa_dir_mgr_pass }}"
      ansible.builtin.import_role:
        name: ipareplica

- name: OCP to IDM Integration
  block:
    - name: Create a directory to store scripts if it does not exist
      ansible.builtin.file:
        path: "{{ scripts_path }}"
        state: directory
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: '0755'

    - name: Render Scripts
      ansible.builtin.template:
        src: "{{ item }}.j2"
        dest: "{{ scripts_path }}/{{ item }}"
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: '0755'
      with_items:
        - 03_getIdmCert.sh
        - 04_ldap-secret.sh
        - 06_groupSync.yml
        - 07_whitelist.txt
        - 08_runSync.sh

    - name: Run scripts to create config map and secret
      ansible.builtin.script:
        cmd: "{{ scripts_path }}/{{ item }}"
      with_items:
        - 03_getIdmCert.sh
        - 04_ldap-secret.sh

    - name: Configure OCP Oauth
      ansible.builtin.include_tasks: create_resource.yml
      vars:
        src: 05_oauth.yml

    - name: Run script to enable LDAP group synchronization
      ansible.builtin.script:
        cmd: "{{ scripts_path }}/{{ item }}"
      with_items:
        - 08_runSync.sh

    - name: Delete scripts directory
      ansible.builtin.file:
        path: "{{ scripts_path }}"
        state: absent

